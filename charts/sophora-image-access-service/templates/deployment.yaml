apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "access-service.fullname" . }}
  labels:
    {{- include "access-service.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "access-service.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/config.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "access-service.labels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "access-service.serviceAccountName" . }}
      containers:
        - name: image-access-service
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
            - mountPath: /app/config
              name: config
          ports:
            - name: http
              containerPort: {{ .Values.service.httpPort }}
              protocol: TCP
          env:
            - name: JDK_JAVA_OPTIONS
              value: {{ .Values.javaOptions }}
            {{- if .Values.sophora.authentication.accessToken }}
            - name: SOPHORA_CLIENT_SERVERCONNECTION_SESSIONLESS
              value: "true"
            - name: SOPHORA_CLIENT_SERVERCONNECTION_ACCESSTOKEN
              valueFrom:
                secretKeyRef:
                  key: {{ .Values.sophora.authentication.accessToken.secret.key | quote }}
                  name: {{ required "A valid secret name must be provided in .Values.sophora.authentication.accessToken.secret.name" .Values.sophora.authentication.accessToken.secret.name | quote }}
            {{- else }}
            - name: SOPHORA_CLIENT_SERVERCONNECTION_USERNAME
              valueFrom:
                secretKeyRef:
                  key: {{ .Values.sophora.authentication.secret.usernameKey | quote }}
                  name: {{ required "A valid secret name must be provided in .Values.sophora.authentication.secret.name" .Values.sophora.authentication.secret.name | quote }}
            - name: SOPHORA_CLIENT_SERVERCONNECTION_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: {{ .Values.sophora.authentication.secret.passwordKey | quote }}
                  name: {{ required "A valid secret name must be provided in .Values.sophora.authentication.secret.name" .Values.sophora.authentication.secret.name | quote }}
            {{- end }}
            - name: S3_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ required "A valid secret name must be provided in .Values.s3.secret.name" .Values.s3.secret.name | quote }}
                  key: {{ .Values.s3.secret.accessKeyIdKey | quote }}
            - name: S3_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ required "A valid secret name must be provided in .Values.s3.secret.name" .Values.s3.secret.name | quote }}
                  key: {{ .Values.s3.secret.secretAccessKeyKey | quote }}
            - name: TZ
              value: {{ .Values.timeZone | quote }}
          {{- with .Values.livenessProbe }}
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: http
            failureThreshold: {{ .failureThreshold }}
            initialDelaySeconds: {{ .initialDelaySeconds }}
            periodSeconds: {{ .periodSeconds }}
            timeoutSeconds: {{ .timeoutSeconds }}
          {{- end }}
          {{- with .Values.readinessProbe }}
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: http
            failureThreshold: {{ .failureThreshold }}
            initialDelaySeconds: {{ .initialDelaySeconds }}
            periodSeconds: {{ .periodSeconds }}
            timeoutSeconds: {{ .timeoutSeconds }}
          {{- end }}
          {{- with .Values.startupProbe }}
          startupProbe:
            httpGet:
              path: /actuator/health
              port: http
            failureThreshold: {{ .failureThreshold }}
            initialDelaySeconds: {{ .initialDelaySeconds }}
            periodSeconds: {{ .periodSeconds }}
            timeoutSeconds: {{ .timeoutSeconds }}
          {{- end}}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: config
          configMap:
            name: {{ include "access-service.fullname" . }}
