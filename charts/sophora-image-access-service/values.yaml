image:
  repository: docker.subshell.com/sophora/sophora-image-access-service
  tag: "latest"
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: sophora-image-access-service

javaOptions: "-XX:InitialRAMPercentage=40.0 -XX:MaxRAMPercentage=60.0 -XX:+ExitOnOutOfMemoryError -XX:+PerfDisableSharedMem -XX:+UnlockDiagnosticVMOptions -XX:GCLockerRetryAllocationCount=20"

timeZone: "Europe/Berlin"

sophora:
  authentication:
    secret:
      name: ""
      passwordKey: "password"
      usernameKey: "username"
# configure accessToken (instead of sophora.authentication.secret) for sessionless client-server connections
#    accessToken:
#      secret:
#        name: token
#        key: accessToken

  # Represents the application.yml of image-access-service:
  configuration:
    sophora:
      client:
        server-connection:
          urls: []
          username: # in secret
          password: # in secret
      image-service:
        s3-image-store:
          host: ""
          access-key-id: ${S3_ACCESS_KEY_ID}
          secret-access-key: ${S3_SECRET_ACCESS_KEY}
          bucket-name: ""
          create-bucket: false
        image-access-service:
          live-mode: false
          short-cache-duration: 1m
          long-cache-duration: 30d
        url:
          domain-name: ""

s3:
  secret:
    name: ""
    accessKeyIdKey: "accessKeyId"
    secretAccessKeyKey: "secretAccessKey"

service:
  annotations: {}
  type: ClusterIP
  ClusterIP:
  httpPort: 8080

serviceMonitor:
  enabled: false
  interval: 10s
  path: /actuator/prometheus

ingress:
  enabled: false
  # For Kubernetes >= 1.18 you should specify the ingress-controller via the field ingressClassName
  # See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress
  # ingressClassName: nginx
  annotations: {}
  hosts:
  tls: []

serviceAccount:
  create: false

replicaCount: 1
resources:
  requests:
    memory: "3G"
    cpu: "2"
  limits:
    memory: "3G"
podAnnotations: {}

startupProbe:
  failureThreshold: 10
  initialDelaySeconds: 10
  timeoutSeconds: 3
  periodSeconds: 2

readinessProbe:
  failureThreshold: 3
  initialDelaySeconds: 1
  timeoutSeconds: 3
  periodSeconds: 5

livenessProbe:
  failureThreshold: 1
  initialDelaySeconds: 1
  timeoutSeconds: 3
  periodSeconds: 60

## @section Extra Deploy
##
## @param extraDeploy Allows to specify custom resources that should be deployed
extraDeploy: []
