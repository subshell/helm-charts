image:
  repository: docker.subshell.com/sophora/avtool/youtube-connector
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "3.0.10"

javaOptions: "-Davtool.groovy.dir=/youtube-connector/groovy -Djava.security.egd=file:/dev/./urandom -XX:MinRAMPercentage=50.0 -XX:MaxRAMPercentage=90.0 -XX:+AlwaysPreTouch"

imagePullSecrets:
  - name: docker-subshell

configGenerator:
  image:
    repository: "docker.subshell.com/misc/alpine-toolkit"
    tag: "0.0.1"
    pullPolicy: IfNotPresent
  extraEnvVarsSecret: avtool-mediaconfig-credentials
  env:
    - name: SAMPLE_ENV_VAR
      value: "Such a sweet sorrow"

service:
  clusterIP: None

resources:
  requests:
    memory: "3.5G"
    cpu: "0.5"
  limits:
    memory: "3.5G"

sophora:
  youtubeconnector:
    logback: |
      <?xml version="1.0" encoding="UTF-8"?>
      <configuration scan="true" scanPeriod="60 seconds">
      <jmxConfigurator/>

      <!-- Propagate level settings to java.util.logging. -->
      <contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator"/>

      <appender class="ch.qos.logback.core.rolling.RollingFileAppender" name="logfile">
      <File>logs/youtube-connector.log</File>
      <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <fileNamePattern>logs/youtube-connector.%d{yyyy-MM-dd}.log</fileNamePattern>
      <maxHistory>14</maxHistory>
      </rollingPolicy>
      <encoder>
      <pattern>[%d{"yyyy-MM-dd HH:mm:ss.SSSX",UTC}, %-5p] [%t] [UUID: %X{uuid}] [SOPHORA_ID: %X{sophora_id}] [USER: %X{user}] %c:%L: %m%n</pattern>
      </encoder>
      </appender>

      <appender class="ch.qos.logback.core.rolling.RollingFileAppender" name="errorLog">
      <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
      <level>ERROR</level>
      </filter>
      <File>logs/youtube-connector_error.log</File>
      <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <fileNamePattern>logs/youtube-connector_error.%d{yyyy-MM-dd}.log</fileNamePattern>
      <maxHistory>14</maxHistory>
      </rollingPolicy>
      <encoder>
      <pattern>[%d{"yyyy-MM-dd HH:mm:ss.SSSX",UTC}, %-5p] [%t] [UUID: %X{uuid}] [SOPHORA_ID: %X{sophora_id}] [USER: %X{user}] %c:%L: %m%n</pattern>
      </encoder>
      </appender>

      <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
      <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
      <level>INFO</level>
      </filter>
      <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>ERROR</level>
      <onMatch>DENY</onMatch>
      <onMismatch>ACCEPT</onMismatch>
      </filter>
      <encoder>
      <pattern>[%d{"yyyy-MM-dd HH:mm:ss.SSSX",UTC}, %-5p] [%t] [UUID: %X{uuid}] [SOPHORA_ID: %X{sophora_id}] [USER: %X{user}] %m%n</pattern>
      </encoder>
      </appender>

      <appender name="STDERR" class="ch.qos.logback.core.ConsoleAppender">
      <target>System.err</target>
      <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
      <level>ERROR</level>
      </filter>
      <encoder>
      <pattern>[%d{"yyyy-MM-dd HH:mm:ss.SSSX",UTC}, %-5p] [%t] [UUID: %X{uuid}] [SOPHORA_ID: %X{sophora_id}] [USER: %X{user}] %c:%L: %m%n</pattern>
      </encoder>
      </appender>

      <logger name="com.subshell.sophora" level="INFO" />
      <logger name="com.subshell.sophora.avtool" level="INFO" />
      <logger name="com.subshell.sophora.avtool.youtube" level="INFO" />
      <logger name="sun.rmi" level="WARN" />
      <logger name="com.google" level="INFO" />

      <root level="WARN">
      <appender-ref ref="STDOUT" />
      <appender-ref ref="STDERR" />
      <appender-ref ref="logfile"/>
      <appender-ref ref="errorLog"/>
      </root>
      </configuration>

    mediaconfig: |
      <?xml version="1.0" encoding="UTF-8"?>
      <beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:util="http://www.springframework.org/schema/util"
      xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

      <!--####################################################################
      Document type and media formats
      #################################################################### -->

      <!-- List of document types -->
      <util:list id="documentDescriptionList">
      <!-- Video -->
      <bean class="com.subshell.sophora.avtool.api.MediaDocumentDescription">
      <property name="formats">
      <set>
      <value>youtube</value>
      </set>
      </property>
      <!-- Only events for this document type are handled. -->
      <property name="nodeTypeName" value="example-nt:video" />
      <!-- Optional: Name of a playout channel. The presence of a document on this channel corresponds to the visibility of the media files on YouTube. -->
      <property name="playoutChannelName" value="YouTube" />
      </bean>
      </util:list>

      <!-- Feedback to DeskClient. Map: error type to error string (you can use a select value for readable labels). -->
      <util:map id="deskclientFeedbackErrTypeConf">
      <entry key="TRANSPORT_MEDIASERVER" value="transport_mediaserver" />
      <entry key="YOUTUBE" value="youtube" />
      <entry key="OTHER" value="other" />
      <entry key="MANY" value="many" />
      <entry key="OK" value="ok" />
      </util:map>

      <!--####################################################################
      Source for video files
      #################################################################### -->

      <bean id="localTransporter" class="com.subshell.sophora.avtool.transporter.LocalFSTransporterFactory" />

      <bean id="mediaServerDescription" class="com.subshell.sophora.avtool.api.ServerDescription">
      <!-- Server name from which the video files should be retrieved. When local file transfer is used,
      this field is only used for logging. -->
      <property name="host" value="mediaserver" />
      <property name="basedir" value="src/test/resources/mediasource" />
      <property name="transporterFactory" ref="localTransporter" />
      <property name="formatDirectoryMapping">
      <map>
      <entry key="youtube" value="." />
      </map>
      </property>
      <!-- Optional: A regex to parse the date from a file's name, which will then be applied to all entries
        in the formatDirecoryMapping that contain format specifiers, e.g. "%1$tY/%1$tm%1$td".
        The date in the file name must be written in the format "yyyyMMdd". -->
      <property name="dateRegex" value="#?.{3}(\d{8}).+" />
      <property name="concatVideosScript" value="/opt/addOpenerCloser.sh" />
      </bean>

      <util:list id="streamingServerDescriptionList">

      <!--####################################################################
      Optional list of servers to upload files to.
      Media files can be uploaded to Akamai or similar CDN servers using ftp, sftp and ftps.
      When a video document is set offline, the corresponding media files will be removed
      from these servers.
      Also purging of files from Akamai can be configured.
      ####################################################################-->

      <bean class="com.subshell.sophora.avtool.api.AkamaiServerDescription">

      <property name="name" value="video-cdn" />
      <property name="transporterFactory" ref="sftpTransporterFactory" />
      <property name="host" value="akamai.example.net" />
      <property name="port" value="22" />
      <property name="user" value="${MEDIACONFIG_SFPT_USERNAME}" />
      <property name="password" value="${MEDIACONFIG_SFPT_PASSWORD}" />
      <property name="keyfile" value="" />

      <!-- Base directory for all uploads -->
      <property name="basedir" value="/video" />

      <!-- Optional: A regex to parse the date from a file's name. -->
      <property name="dateRegex" value="#?.{3}(\d{8}).+" />

      <!-- Akamai FastPurge -->
      <property name="akamaiUrlPrefixes">
      <list>
      <value>http://download.mysite.com/video/%1$tY/%1$tm%1$td/{filename}</value>
      <value>http://media.mysite.com/video/%1$tY/%1$tm%1$td/{filename}</value>
      </list>
      </property>

      <!-- Akamai HLS/HDS Purge   -->
      <property name="akamaiRestPurgeConfiguration">
      <list>
      <bean class="com.subshell.sophora.avtool.api.AkamaiRestPurgeRequestConfiguration">
      <property name="requestName" value="HLS" />
      <property name="requestPath" value="/config-media-live/v1/vod/purge/HLS"/>
      <property name="manifestUrl" value="https://mysite.akamaihd.net/i/video/%1$tY/%1$tm%1$td/{sequencename}.,webs,webm,webl,webxl,.h264.mp4.csmil/master.m3u8" />
      <property name="fileNamePattern" value="%1$tY/%1$tm%1$td/{filename}" />
      </bean>
      </list>
      </property>

      <!-- Mapping of format to server path. Can use date fields parsed using the dateRegex. -->
      <property name="formatDirectoryMapping">
      <map>
      <entry key="youtube" value="%1$tY/%1$tm%1$td" />
      </map>
      </property>
      </bean>
      </util:list>

      <!--####################################################################
      YouTube
      #################################################################### -->

      <!-- YouTube settings for all channels -->
      <bean id="youtubeGlobalConfig" class="com.subshell.sophora.avtool.api.youtube.YoutubeConfiguration">
      <!-- After uploading a video to YouTube, the YouTube id is written back to the document into this property.
      Required for removing videos from YouTube when the document goes offline. -->
      <property name="youtubeIdPropertyName" value="example:youtubeId" />
      <!-- Property of the document that indicates which channel to use. -->
      <property name="youtubeAccountPropertyName" value="youtube.channel" />
      <!-- The YouTube action to take when a video document is deleted or set offline. Options are DELETE, SET_PRIVATE, and DO_NOTHING. -->
      <property name="deleteEventAction" value="DELETE" />
      <property name="offlineEventAction" value="SET_PRIVATE" />
      <!-- Application for adding opener and closer to the beginning/end of video. The specific videos are configured per channel. -->
      <property name="concatVideosScript" value="/cms-install-directory/ytc_opener_und_closer/addOpenerCloser_ffmpeg.sh" />
      </bean>

      </beans>
    # can be either 'properties' or 'yml'
    configFormat: 'properties'
    config: |
      # Connection to the Sophora Primary (Master) Server.
      sophoraServer.host = http://localhost:1196
      sophoraServer.username = youtubeconnector
      sophoraServer.password = XXXXXXX

      # URL/Path to the config for media formats and -servers.
      mediaConfig = file:mediaconfig.xml

      # Web server
      server.port = 5063

      # JMX
      jmx.registry.port = 5060
      rmi.registry.port = 5061
      jmx.registry.username =
      jmx.registry.password =

      # Upload protocol to use for YouTube videos.
      # false = the entire media content will be uploaded in a single request (not resumable)
      # true = the request will use the resumable media upload protocol to upload in data chunks
      # For details see https://developers.google.com/youtube/v3/guides/using_resumable_upload_protocol
      youtube.chunking = true

      # tries after first IO error
      uploader.retry.count = 2
      uploader.retry.waitSeconds = 15

      # Path for the MD5 digest database.
      digest.dir = /cms-install-directory/youtube-connector/digest

      # Path for the persistent queue file.
      job.store.path = /app/jobstore/queue.xml

      # Test mode: Set to true to only log operations instead of executing them.
      logonly.fileoperations = false
      logonly.publishdocuments = false

      # In the tagging configuration of the YouTube channel configuration, values with these prefixes are considered to be
      # property references.
      tagging.propertyPrefix.regexp = ^(example:|sophora:|youtube.).*$
      # In the tagging configuration of the YouTube channel configuration, values with these prefixes are considered to be
      # references to Groovy tagging scripts.
      tagging.scriptClassPrefix.regexp = ^(scriptClass:)(.+)$

      # Groovy scripts (comma-separated) that can modify the document before processing
      document.preprocessorScripts =

      # Path of the proposal section, path elements must be separated by ';'.
      # When a transport error occurs, a proposal will be created in this section.
      # Leave empty to not create proposals.
      proposalsection.path =

    secret:
      name: youtube-connector-credentials
      server:
        usernameKey: sophora-username
        passwordKey: sophora-password

    jobstore:
      storage:
        storageClass: standard
        resources:
          requests:
            storage: 50M
    oauth:
      storage:
        storageClass: standard
        resources:
          requests:
            storage: 50M

    extraEnvVarsSecret: youtube-connector-envs
    env:
      - name: MY_SAMPLE_ENV_VAR
        value: "hello, I'm an env variable"
