image:
  repository: docker.subshell.com/sophora/sophora-importer
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "master"

downloadViaHttpImage:
  repository: "docker.subshell.com/misc/alpine-toolkit"
  tag: "0.1.0"
  pullPolicy: IfNotPresent

downloadViaS3Image:
  repository: "docker.subshell.com/misc/aws-cli-tools"
  tag: "0.0.2"
  pullPolicy: IfNotPresent

s3fsImage:
  repository: efrecon/s3fs
  tag: "1.91"
  pullPolicy: IfNotPresent

nodeSelector: {}
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

## @param extraDeploy Extra objects to deploy (value evaluated as a template)
##
extraDeploy: []

javaOptions: "-XX:InitialRAMPercentage=50.0 -XX:MaxRAMPercentage=80.0 -XX:+ExitOnOutOfMemoryError -XX:+PerfDisableSharedMem"

# - (object) k8s Pod host aliases which will be used to generate the /etc/hosts file
hostAliases:

serviceMonitor:
  enabled: false
  interval: 10s

sophora:
  authentication:
    secret:
      name: ""
      passwordKey: "password"
      usernameKey: "username"
  importer:
    s3Bucket:
      # If enabled, the importer uses a s3 bucket for incoming imports
      enabled: true
      name: ""
      url: "https://storage.googleapis.com"
      secret:
        name: ""
        secretAccessKeyKey: "secretAccessKey"
        accessKeyIdKey: "accessKeyId"
      extraEnv:
        - name: S3FS_ARGS
          value: nonempty
      resources:
        requests:
          cpu: 200m
          memory: 256Mi
        limits:
          memory: 256Mi
    extraEnv:
    loaderPath:
    instances: []
    createImportFolders:
      incoming: s3
      failure: s3
      success: local
      temp: local
    configuration: {}

logbackXml: |
  <?xml version="1.0" encoding="UTF-8"?>
  <configuration scan="true" scanPeriod="60 seconds">
      <jmxConfigurator/>
  
      <appender name="jsonConsoleAppender" class="ch.qos.logback.core.ConsoleAppender">
          <filter class="ch.qos.logback.core.filter.EvaluatorFilter">
              <evaluator>
                  <!-- No log messages marked as 'SPECIAL_EMAIL_NOTIFICATION' should be shown. -->
                  <expression>marker != null &amp;&amp; marker.getName().equals("SPECIAL_EMAIL_NOTIFICATION")</expression>
              </evaluator>
              <OnMismatch>NEUTRAL</OnMismatch>
              <OnMatch>DENY</OnMatch>
          </filter>
          <encoder class="net.logstash.logback.encoder.LogstashEncoder" />
      </appender>
  
      <logger name="com.subshell.sophora" level="INFO"/>
      <logger name="com.subshell.sophora.importer" level="INFO"/>
      <logger name="org.springframework.boot" level="INFO"/>
  
      <root level="WARN">
          <appender-ref ref="jsonConsoleAppender"/>
      </root>
  </configuration>

transformation:
  enabled: false
  xslTransformerFactory:
  data:
    use: s3
    zipViaHttp:
      secretName:
      zipUrls:
      usernameKey: "username"
      passwordKey: "password"
    zipViaS3:
      secretName:
      s3Endpoint: "https://storage.googleapis.com"
      bucketName:
      zipPaths:
      secretAccessKeyKey: "secretAccessKey"
      accessKeyIdKey: "accessKeyId"
    useSaxon: false
    saxonLicenceSecretName: "saxon-license"
    saxonLicenceSecretKey: "saxon-license.lic"
    libsPath: libs
    xslPath: xsl

podAnnotations: {}

resources:
  requests:
    cpu: 200m
    memory: 2Gi
  limits:
    memory: 2Gi

service:
  annotations: {}
  clusterIP: None
  httpPort: 80

ingress:
  enabled: false
  # For Kubernetes >= 1.18 you should specify the ingress-controller via the field ingressClassName
  # See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress
  # ingressClassName: nginx
  annotations: {}
  hosts:
  tls: []


# There is the option of setting up the importer container with additionalVolumes and additionalVolumeMounts.
# In this case the volumeMount and the volume must be used together and be configured in the same way (e.g. have the same name).
additionalVolumes:

additionalVolumeMounts:

# This option can be used to create a pvc for the local import folders
importPvcSpec:
