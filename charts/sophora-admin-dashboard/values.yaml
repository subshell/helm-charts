# -- (int) number of replicas/pods in the statefulset
replicaCount: 1

image:
  # -- (string) image repository
  repository: docker.subshell.com/sophora/sophora-dashboard
  # -- (string) the k8s image pull policy
  pullPolicy: IfNotPresent
  # -- (string) overrides the image tag
  tag: "latest"

# -- (string[]) references to existing image pull secrets This will be directly
# -- injected into the imagePullSecrets of the statefulset.
imagePullSecrets: []

# -- (string) expands the name of the Chart
nameOverride: ""
# -- (string) overrides the fully qualified name used to identify the components of the helm chart.
# -- the value is limited to 63 chars
fullnameOverride: ""

# -- (string) java options passed to the JVM.
javaOptions: "-XX:InitialRAMPercentage=50.0 -XX:MaxRAMPercentage=80.0 -XX:+ExitOnOutOfMemoryError -XX:+PerfDisableSharedMem"

# - (object) k8s Pod host aliases which will be used to generate the /etc/hosts file
hostAliases:


configGenerator:
  image:
    repository: "docker.subshell.com/misc/alpine-toolkit"
    tag: "0.0.1"
    pullPolicy: IfNotPresent

service:
  # -- (string) k8s service type
  type:
  # -- (object) k8s service annotations
  annotations:
  # -- (string) k8s service cluster ip
  clusterIP:
  # -- (string) k8s service load balancer
  loadBalancerIP:
  # -- (int) k8s service port that will be exposed by the service
  port: 80

# -- (string) k8s storage class name for generated dashboard files
storageClassName: ""

storage:
  persistence:
    # -- (object) resources of persistence volume claim
    resources:
      requests:
        storage: 1Mi
  rrd:
    # -- (object) resources of rrd volume claim
    resources:
      requests:
        storage: 200Mi

sophora:
  # -- (string) Sophora server hostname
  serverHostname: ""
  # -- (int) Sophora server port
  serverPort: 1196
  # -- (string) absolute path to jolokia
  jolokiaPath: "/jolokia"
  # -- (string) URL or path to solr
  solrUrl: "/solr"
  # -- (bool) set to true if the ibf filter is enabled
  ibfEnabled: false
  # -- (bool) set to false if using SolrCloud
  hasEmbeddedSolr: true
  authentication:
    # -- (object) user credentials for the sophora server stored in a secret
    serverSecret:
      name: ""
      passwordKey: "password"
      usernameKey: "username"

    # -- (object) user credentials for solr stored in a secret
    solrSecret:
      name: ""
      passwordKey: "password"
      usernameKey: "username"

    # -- (object) user credentials for jolokia stored in a secret
    jolokiaSecrets:
      server:
        name: ""
        passwordKey: "password"
        usernameKey: "username"
      importer:
        name: ""
        passwordKey: "password"
        usernameKey: "username"
      indexer:
        name: ""
        passwordKey: "password"
        usernameKey: "username"

  dashboard:
    logback: |
      <?xml version="1.0" encoding="UTF-8" ?>

      <configuration scan="true" scanPerion="10 seconds">
          <jmxConfigurator />
          
          <!-- Propagate level settings to java.util.logging. -->
          <contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator" />
          
          <property name="PATTERN" value="%d{HH:mm:ss} %-5level [%thread] [%X] %logger{0}:%L: %m%n" />
          <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
              <encoder>
                  <pattern>[%d{ISO8601}, %-5p] [%thread] %-5level %.40c:%L - %msg %n</pattern>
              </encoder>
          </appender>
          <appender name="logfile" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <File>logs/dashboard.log</File>
          
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                  <fileNamePattern>logs/dashboard.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
                  <maxHistory>7</maxHistory>
              </rollingPolicy>
              <encoder>
                  <pattern>${PATTERN}</pattern>
              </encoder>
          </appender>
          
          <appender name="warnlog" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                  <level>WARN</level>
              </filter>
          
              <File>logs/dashboard_warn.log</File>
          
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                  <fileNamePattern>logs/dashboard_warn.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
                  <maxHistory>7</maxHistory>
              </rollingPolicy>
              <encoder>
                  <pattern>${PATTERN}</pattern>
              </encoder>
          </appender>
          
          <appender name="jetty" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <file>logs/dashboard_request.log</file>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                  <fileNamePattern>logs/dashboard_request.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
                  <maxHistory>30</maxHistory>
              </rollingPolicy>
              <encoder>
                  <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>
              </encoder>
          </appender>
          
          <logger name="com.subshell.sophora" level="INFO" />
          <logger name="org.springframework" level="WARN" />
          <!-- Suppress warnings from the RestTemplate. It will throw an exception anyway. -->
          <logger name="org.springframework.web.client.RestTemplate" level="ERROR" />
          <logger name="org.eclipse.jetty" level="WARN" />
          
          <logger name="org.eclipse.jetty.server.RequestLog" level="INFO" additivity="false">
              <appender-ref ref="jetty" />
          </logger>
          
          <root level="WARN">
              <appender-ref ref="STDOUT" />
          </root>
      </configuration>

startupProbe:
  failureThreshold: 10
  initialDelaySeconds: 10
  timeoutSeconds: 1
  periodSeconds: 2

readinessProbe:
  failureThreshold: 3
  initialDelaySeconds: 5
  timeoutSeconds: 5
  periodSeconds: 5

livenessProbe:
  failureThreshold: 3
  initialDelaySeconds: 15
  timeoutSeconds: 10
  periodSeconds: 60

ingress:
  enabled: true
  # For Kubernetes >= 1.18 you should specify the ingress-controller via the field ingressClassName
  # See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress
  # ingressClassName: nginx
  annotations: {}
    # kubernetes.io/tls-acme: "true"
  hosts:

  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  requests:
    cpu: 50m
    memory: 2.5Gi
  limits:
    memory: 2.5Gi

podAnnotations: {}

nodeSelector: {}

tolerations: []

affinity: {}

env: {}
