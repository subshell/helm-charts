service:
  jolokia:
    clusterIP: None
  webapp:
    type: LoadBalancer

ingress:
  enabled: true
  ingressClassName: nginx
  hosts:
    - host: "ugc.kunow.io"
      pathType: Prefix

imagePullSecrets:
  - name: regcred

authentication:
  secret:
    server:
      name: sophora-user
      usernameKey: username
      passwordKey: password
    database:
      name: sophora-user
      usernameKey: database-user
      passwordKey: database-password
    binarystore:
      name: secret-name
      accessKeyKey: binarystore-access-key
      secretIdKey: binarystore-secret-id 

ugc:
  image:
    repository: docker.subshell.com/ugc/ugc
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"
  binariesStorage:
    size: 1G
    storageClass: standard
  
  logback: |
    <?xml version="1.0" encoding="UTF-8"?>
    <configuration scan="true">
        <jmxConfigurator />

        <!-- Propagate level settings to java.util.logging. -->
        <contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator"/>

        <appender name="logfile" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <File>/logs/ugc-webapp.log</File>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>/logs/ugc.%d{yyyy-MM-dd}.log</fileNamePattern>
                <maxHistory>7</maxHistory>
            </rollingPolicy>
            <encoder>
                <pattern>[%d{"yyyy-MM-dd HH:mm:ss.SSSX",UTC}, %-5p] [%t] [%X{ID}] %.30c:%L: %m%n</pattern>
            </encoder>
        </appender>
        <appender name="errorLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>ERROR</level>
            </filter>
            <File>/logs/error.log</File>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>/logs/error.%d{yyyy-MM-dd}.log</fileNamePattern>
                <maxHistory>7</maxHistory>
            </rollingPolicy>
            <encoder>
                <pattern>[%d{"yyyy-MM-dd HH:mm:ss.SSSX",UTC}, %-5p] [%t] [%X{ID}] %.40c:%L: %m%n</pattern>
            </encoder>
        </appender>

        <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
            <encoder>
                <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level [%X{ID}] %logger{36} - %msg%n</pattern>
            </encoder>
        </appender>

        <logger name="com.subshell.sophora.ugc" level="INFO" />

        <root level="WARN">
            <appender-ref ref="STDOUT" />
            <appender-ref ref="logfile" />
            <appender-ref ref="errorLog" />
        </root>
    </configuration>

  config:
    sophora-server:
      username: "admin"
      password: "admin"
      host: "http://4.buero.subshell.io:1196"
      proxyHost: null
      proxyUser: null
      proxyPassword: null
      proxyPort: 0
      connectRetries: 3
      connectRetryInterval: 10
      slavesInfoDir: ""
    
    database:
      url: "jdbc:mysql://host.docker.internal:3306/ugc"
      user: "root"
      password: "password"
      jpaCache: false
    
    caching:
      cacheServerletUrl: null
      cacheServletGroup: null
      cacheServletPassword: null
      invalidationRequestDelay: 30
    
    email:
      transport:
        host: "localhost"
        port: 25
        user: null
        password: null
        starttls: true
        properties: {}
    
    double-opt-in:
      template:
        from: null
        subject: "Please verify your email address"
        replyTo: null
        cc: null
        bcc: null
    
    confirmation:
      template:
        from: null
        subject: null
        replyTo: null
        cc: null
        bcc: null
    
    comment:
      primaryTypes: ["sophora-content-nt:story"]
      limitPerTenSeconds: 1
      limitPerMinute: 2
      limitPerDay: 100
      multiUserEnabled: "true"
      avatarVariant: "small"
      editorNodetype: "sophora-ugc-nt:ugcEditor"
      editorAvatarProperty: "sophora-ugc:avatar"
      editorNameProperty: "sophora-ugc:name"
      headlineSize: 255
      contentSize: 1000
      editTolerance: 0
    
    spamList:
      spamWordsProperty: "sophora-ugc:spamWords"
      primaryType: "sophora-ugc-nt:spamList"
      externalId: "49bc5b8c-f37e-45a4-9cc3-c16b38f3b569"
    
    form:
      formFieldName_Email: "email"
      doubleOptInProperty: "sophora-ugc:useDoubleOptIn"
      optInEmailTextProperty: "sophora-ugc:emailText"
      optInEmailSubjectProperty: "sophora-ugc:emailSubject"
      confirmationEmailProperty: "sophora-ugc:enableConfirmationEmail"
      confirmationEmailTextProperty: "sophora-ugc:confirmationEmailText"
      confirmationEmailSubjectProperty: "sophora-ugc:confirmationEmailSubject"
      formFieldsChildnode: "sophora-ugc:formFields"
      fieldNameProperty: "sophora-extension:formfieldname"
      fieldStyleProperty: "sophora-extension:fieldstyle"
      labelProperty: "sophora-extension:question"
      requiredProperty: "sophora-extension:formrequired"
      headlineProperty: "sophora-ugc:title"
      primaryType: "sophora-ugc-nt:form"
      useFormWizard: true
      formWizardProperty: "sophora-ugc:formWizard"
      blacklistedFieldTypes: ["submit", "button", "reset"]
    
    form-search:
      formDataSearchRegex: ".+"
      validationErrorMsg: "Ungueltige Eingabe"
      numberOfResultsCached: 14
      removeAfter: 7200000
    
    image-upload:
      primaryTypes: ["sophora-content-nt:story"]
      limitPerTenSeconds: 1
      limitPerMinute: 2
      limitPerDay: 100
      proposalSection: "User-Bilder"
      imageNodeType: "sophora-extension-nt:image"
    
    rating:
      primaryTypes: ["sophora-content-nt:story"]
      limitPerTenSeconds: 1
      limitPerMinute: 2
      limitPerDay: 100
    
    quiz:
      formFieldName_Email: "email"
      answerTextProperty: "sophora-ugc:text"
      answerUuidProperty: "sophora-ugc:uuid"
      answerPointsProperty: "sophora-ugc:points"
      answerCommentProperty: "sophora-ugc:description"
      answerIsCorrectProperty: "sophora-ugc:isCorrect"
      questionTextProperty: "sophora-ugc:text"
      questionAnswersChildnode: "sophora-ugc:answers"
      headlineProperty: "sophora-ugc:title"
      questionsChildnode: "sophora-ugc:questions"
      formProperty: "sophora-ugc:form"
      primaryType: "sophora-ugc-nt:quiz"
    
    voting:
      formFieldName_Email: "email"
      headlineProperty: "sophora-ugc:title"
      formProperty: "sophora-ugc:form"
      primaryType: "sophora-ugc-nt:voting"
      votingToProperty: "sophora-ugc:validTo"
      numberOfVotesProperty: "sophora-ugc:numberOfVotes"
      itemsChildnode: "sophora-ugc:votingItems"
      itemTextProperty: "sophora-ugc:text"
      itemUuidProperty: "sophora-ugc:uuid"
      itemDescriptionProperty: "sophora-ugc:description"
      votingTypeProperty: "sophora-ugc:votingType"
      defaultVotingType: "simple"
      timeoutDelay: 30
      cacheUpdateInterval: 240
      cacheEvictAfterMinutes: 720
      cacheMaxNumberOfCachedReports: 50
    
    manipulation:
      filtersProperty: "sophora-ugc:manipulationFilters"
      entriesAllowedProperty: "sophora-ugc:entriesAllowed"
      intervalProperty: "sophora-ugc:manipulationInterval"
      intervalTypeProperty: "sophora-ugc:manipulationIntervalType"
    
    serial-programs:
      idProperty: "sophora-ugc:serialProgram"
      broadcastType: "sophora-content:broadcastType"
      subHierarchydocument: "subHierarchydocument"
      externalId: "40b38a3c-dfc0-4e3b-abf2-2bcea73d01b6"
      titleProperty: "sophora-content:title"
      allowedNodetypes: []
    
    load-information:
      entriesPerHost: 10000
      daysToDeclareDead: 2
    
    server:
      port: 9080
      forward-headers-strategy: "FRAMEWORK"
    
    spring:
      security:
        user:
          name: "a"
          password: "a"
    
    jolokia:
      username: ""
      password: ""
    
    features:
      actions:
        enableDeleteByUser: false
        enableOverwriteUsername: false
        enableOverwriteExternalUserId: false
        enableActionsByFilter: false
        enableDeleteByFilter: false
    
      filters:
        documentTypes: true
        serialPrograms: false
        editors: true
        dates: true
        status: true
        markers: false
        serialProgramsType: "bySelectValue"
        serialProgramsName: "Sendungsreihe"
    
      notes:
        enabled: false
    
      pinning:
        enabled: false
    
      markers: []
    
      comment-templates:
        enabled: false
        templateNodeType: "sophora-ugc-nt:commentTemplate"
        templateStructureNodePath: null
        templateIdStem: "kommentartemplate"
    
    isMainApp: false
    previewUrl: null
    simpleDocumentHeadlineProperty: "sophora-content:title"
    waitingTimeBetweenStartupAttempts: 10000
    maxNumberOfSubmissionsSaved: 500
    iFramesAllowed: true

websocket:
  allowedOrigin: http://localhost:9000

springdoc:
  swagger-ui:
    url: "/v3/api-docs"
    disable-swagger-default-url: true
    csrf:
      enabled: true

ugcMultimedia:
  enabled: true
  image:
    repository: docker.subshell.com/ugc/ugc-multimedia
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"
  hostname:
  logback: |
    <?xml version="1.0" encoding="UTF-8"?>
    
    <configuration scan="true" scanPeriod="60 seconds">
    <jmxConfigurator />
    
    <!-- Propagate level settings to java.util.logging. -->
    <contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator"/>
    
    <appender name="logfile" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <File>logs/ugc-multimedia.log</File>
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
    <fileNamePattern>logs/ugc-multimedia.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
    <maxHistory>7</maxHistory>
    </rollingPolicy>
    <encoder>
    <pattern>[%d{ISO8601}, %-5p] [%t] [%X{ID}] %.30c:%L: %m%n</pattern>
    </encoder>
    </appender>
    <appender name="errorLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
    <level>ERROR</level>
    </filter>
    <File>logs/ugc-multimedia-error.log</File>
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
    <fileNamePattern>logs/ugc-multimedia-error.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
    <maxHistory>7</maxHistory>
    </rollingPolicy>
    <encoder>
    <pattern>[%d{ISO8601}, %-5p] [%t] [%X{ID}] %.40c:%L: %m%n</pattern>
    </encoder>
    </appender>
    
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <encoder>
    <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level [%X{ID}] %logger{36} - %msg%n</pattern>
    </encoder>
    </appender>
    
    <logger name="com.subshell.sophora.ugc.services" level="DEBUG" />
    <logger name="org.springframework" level="INFO" />
    
    <root level="INFO">
    <appender-ref ref="logfile" />
    <appender-ref ref="STDOUT" />
    <appender-ref ref="errorLog" />
    </root>
    </configuration>
  config:
    spring:
      jpa:
        hibernate:
          ddl-auto: update
        database-platform: org.hibernate.dialect.MySQL5InnoDBDialect # org.hibernate.dialect.Oracle12cDialect
        database: mysql # oracle
      datasource:
        url: jdbc:mysql://host.docker.internal:3306/ugc
        username: ${DATABASE_USER}
        password: ${DATABASE_PASSWORD}
        driver-class-name: com.mysql.cj.jdbc.Driver # oracle.jdbc.OracleDriver
      servlet:
        multipart:
          max-file-size: 20MB
          max-request-size: 20MB

    management:
      endpoints:
        web:
          exposure:
            include: "prometheus"
      endpoint:
        prometheus:
          enabled: true

    sophora:
      client:
        server-connection:
          urls: http://4.buero.subshell.io:1196
          username: ${SOPHORA-SERVER_USERNAME}
          password: ${SOPHORA-SERVER_PASSWORD}

    storage:
      type: fs
      fs:
        baseDir: /binaries/
      # Configuration for s3
      # type: s3
      # s3:
      #   accessKeyId: ${BINARY_STORE_ACCESS_KEY}
      #   secretAccessKey: ${BINARY_STORE_SECRET_ID}
      #   bucketName: <bucketName>
      #   host: <host>

    multimedia:
      allowedMimeTypes:
        - audio
        - video
      headlineProperty: sophora-content:title
      markers:
        - key: "key1"
          label: "topic 1"
          colorValue: "Red"
        - key: "key 2"
          label: "topic 2"
          colorValue: "Gold"
        - key: "key 3"
          label: "topic 3"
          colorValue: "Green"

    clamd:
      clamdHost:
      clamdPort: 0
      timeoutInMS: 10
      clamdFileStorageDir: clamdTest/
      httpStatusCodeForVirus: 200

    cleanup:
      binaries:
        enabled: false
        cronSchedule: "0 59  * * * *"
        regexForBinaries: "[a-z0-9-]{36,}" #Regex for UUIDs
        binaryWasAtLeastNotModifiedSinceHours: 0
      metadata:
        enabled: false
        cronSchedule: "0 59  * * * *"
        minimumAgeInHours: 0

    headers:
      crossOriginUrl: "http://localhost:8080"

    websocket:
      allowedOrigin: http://localhost:9000

    springdoc:
      swagger-ui:
        url: "/v3/api-docs"
        disable-swagger-default-url: true
        csrf:
          enabled: true

# Additional environment variables can be defined here
env:

resources:
  requests:
    memory: "3.5G"
    cpu: "0.5"
  limits:
    memory: "3.5G"